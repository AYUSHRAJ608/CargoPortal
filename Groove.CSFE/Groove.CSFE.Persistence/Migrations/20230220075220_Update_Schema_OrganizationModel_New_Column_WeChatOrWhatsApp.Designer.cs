// <auto-generated />
using System;
using Groove.CSFE.Persistence.Contexts;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Groove.CSFE.Persistence.Migrations
{
    [DbContext(typeof(CsfeContext))]
    [Migration("20230220075220_Update_Schema_OrganizationModel_New_Column_WeChatOrWhatsApp")]
    partial class Update_Schema_OrganizationModel_New_Column_WeChatOrWhatsApp
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.1")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("Groove.CSFE.Application.Organizations.ViewModels.CustomerRelationshipQueryModel", b =>
                {
                    b.Property<string>("AdminUser")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Code")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ConnectionType")
                        .HasColumnType("int");

                    b.Property<string>("ContactEmail")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ContactName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CountryName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("CustomerRefId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("Id")
                        .HasColumnType("bigint");

                    b.Property<bool>("IsConfirmConnectionType")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("OrganizationType")
                        .HasColumnType("int");

                    b.ToView(null);
                });

            modelBuilder.Entity("Groove.CSFE.Application.Organizations.ViewModels.OrganizationQueryModel", b =>
                {
                    b.Property<string>("Code")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ContactEmail")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ContactName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ContactNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CountryName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<long>("Id")
                        .HasColumnType("bigint");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("OrganizationType")
                        .HasColumnType("int");

                    b.Property<string>("OrganizationTypeName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<string>("StatusName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("WebsiteDomain")
                        .HasColumnType("nvarchar(max)");

                    b.ToView(null);
                });

            modelBuilder.Entity("Groove.CSFE.Core.Entities.AlternativeLocationModel", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"), 1L, 1);

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(128)
                        .HasColumnType("varchar(128)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<long>("LocationId")
                        .HasColumnType("bigint");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(128)");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(128)
                        .HasColumnType("varchar(128)");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("LocationId");

                    b.ToTable("AlternativeLocations");
                });

            modelBuilder.Entity("Groove.CSFE.Core.Entities.CarrierModel", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"), 1L, 1);

                    b.Property<string>("CarrierCode")
                        .HasColumnType("NVARCHAR(128)");

                    b.Property<int?>("CarrierNumber")
                        .HasColumnType("int");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(128)
                        .HasColumnType("varchar(128)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("ModeOfTransport")
                        .HasColumnType("NVARCHAR(128)");

                    b.Property<string>("Name")
                        .HasColumnType("NVARCHAR(512)");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.Property<byte>("Status")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tinyint")
                        .HasDefaultValue((byte)1);

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(128)
                        .HasColumnType("varchar(128)");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("Carriers");
                });

            modelBuilder.Entity("Groove.CSFE.Core.Entities.CarrierQueryModel", b =>
                {
                    b.Property<string>("CarrierCode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CarrierCodeNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("CarrierNumber")
                        .HasColumnType("int");

                    b.Property<long>("Id")
                        .HasColumnType("bigint");

                    b.Property<string>("ModeOfTransport")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<byte>("Status")
                        .HasColumnType("tinyint");

                    b.ToView(null);
                });

            modelBuilder.Entity("Groove.CSFE.Core.Entities.CountryModel", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"), 1L, 1);

                    b.Property<string>("Code")
                        .HasColumnType("nvarchar(4)");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(128)
                        .HasColumnType("varchar(128)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(128)");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(128)
                        .HasColumnType("varchar(128)");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("Countries");
                });

            modelBuilder.Entity("Groove.CSFE.Core.Entities.CurrencyModel", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"), 1L, 1);

                    b.Property<string>("Code")
                        .HasColumnType("nvarchar(16)");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(128)
                        .HasColumnType("varchar(128)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<byte?>("CurrencyPrecision")
                        .HasColumnType("tinyint");

                    b.Property<decimal?>("ExchangeRate")
                        .HasColumnType("DECIMAL(18,4)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(128)");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.Property<byte>("Status")
                        .HasColumnType("tinyint");

                    b.Property<string>("Symbol")
                        .HasColumnType("nvarchar(8)");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(128)
                        .HasColumnType("varchar(128)");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("Currencies");
                });

            modelBuilder.Entity("Groove.CSFE.Core.Entities.CustomerRelationshipModel", b =>
                {
                    b.Property<long>("SupplierId")
                        .HasColumnType("bigint");

                    b.Property<long>("CustomerId")
                        .HasColumnType("bigint");

                    b.Property<int>("ConnectionType")
                        .HasColumnType("int");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(128)
                        .HasColumnType("varchar(128)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("CustomerRefId")
                        .HasMaxLength(20)
                        .HasColumnType("NVARCHAR(20)");

                    b.Property<bool>("IsConfirmConnectionType")
                        .HasColumnType("bit");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(128)
                        .HasColumnType("varchar(128)");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("SupplierId", "CustomerId");

                    b.HasIndex("CustomerId");

                    b.ToTable("CustomerRelationship");
                });

            modelBuilder.Entity("Groove.CSFE.Core.Entities.EmailNotificationModel", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"), 1L, 1);

                    b.Property<long?>("CountryId")
                        .HasColumnType("bigint");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(128)
                        .HasColumnType("varchar(128)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<long>("CustomerId")
                        .HasColumnType("bigint");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("NVARCHAR(255)");

                    b.Property<long>("OrganizationId")
                        .HasColumnType("bigint");

                    b.Property<string>("PortSelectionIds")
                        .HasColumnType("nvarchar(max)");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(128)
                        .HasColumnType("varchar(128)");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("CountryId");

                    b.HasIndex("CustomerId");

                    b.HasIndex("OrganizationId");

                    b.ToTable("EmailNotifications");
                });

            modelBuilder.Entity("Groove.CSFE.Core.Entities.EventCodeModel", b =>
                {
                    b.Property<string>("ActivityCode")
                        .HasMaxLength(10)
                        .HasColumnType("NVARCHAR(10)");

                    b.Property<string>("ActivityDescription")
                        .IsRequired()
                        .HasMaxLength(512)
                        .HasColumnType("NVARCHAR(512)");

                    b.Property<string>("ActivityTypeCode")
                        .HasMaxLength(10)
                        .HasColumnType("NVARCHAR(10)");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(128)
                        .HasColumnType("varchar(128)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("LocationRequired")
                        .HasColumnType("bit");

                    b.Property<bool>("RemarkRequired")
                        .HasColumnType("bit");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.Property<long>("SortSequence")
                        .HasColumnType("bigint");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(128)
                        .HasColumnType("varchar(128)");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("ActivityCode");

                    b.HasIndex("ActivityTypeCode");

                    b.ToTable("EventCodes");

                    b.HasData(
                        new
                        {
                            ActivityCode = "1000",
                            ActivityDescription = "PO Issued",
                            ActivityTypeCode = "PM",
                            CreatedBy = "System",
                            CreatedDate = new DateTime(2021, 9, 14, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            LocationRequired = false,
                            RemarkRequired = false,
                            SortSequence = 0L
                        },
                        new
                        {
                            ActivityCode = "1001",
                            ActivityDescription = "PO on hold",
                            ActivityTypeCode = "PE",
                            CreatedBy = "System",
                            CreatedDate = new DateTime(2021, 9, 14, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            LocationRequired = false,
                            RemarkRequired = true,
                            SortSequence = 0L
                        },
                        new
                        {
                            ActivityCode = "1002",
                            ActivityDescription = "PO Acknowledged",
                            ActivityTypeCode = "PA",
                            CreatedBy = "System",
                            CreatedDate = new DateTime(2021, 9, 14, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            LocationRequired = false,
                            RemarkRequired = false,
                            SortSequence = 0L
                        },
                        new
                        {
                            ActivityCode = "1003",
                            ActivityDescription = "PO Amendment",
                            ActivityTypeCode = "PA",
                            CreatedBy = "System",
                            CreatedDate = new DateTime(2021, 9, 14, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            LocationRequired = false,
                            RemarkRequired = false,
                            SortSequence = 0L
                        },
                        new
                        {
                            ActivityCode = "1004",
                            ActivityDescription = "PO Amendment Failure",
                            ActivityTypeCode = "PE",
                            CreatedBy = "System",
                            CreatedDate = new DateTime(2021, 9, 14, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            LocationRequired = false,
                            RemarkRequired = true,
                            SortSequence = 0L
                        },
                        new
                        {
                            ActivityCode = "1005",
                            ActivityDescription = "PO cancelled",
                            ActivityTypeCode = "PE",
                            CreatedBy = "System",
                            CreatedDate = new DateTime(2021, 9, 14, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            LocationRequired = false,
                            RemarkRequired = true,
                            SortSequence = 0L
                        },
                        new
                        {
                            ActivityCode = "1006",
                            ActivityDescription = "PO Cancellation Failure",
                            ActivityTypeCode = "PA",
                            CreatedBy = "System",
                            CreatedDate = new DateTime(2021, 9, 14, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            LocationRequired = false,
                            RemarkRequired = false,
                            SortSequence = 0L
                        },
                        new
                        {
                            ActivityCode = "1010",
                            ActivityDescription = "PO Closed",
                            ActivityTypeCode = "PM",
                            CreatedBy = "System",
                            CreatedDate = new DateTime(2021, 9, 14, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            LocationRequired = false,
                            RemarkRequired = false,
                            SortSequence = 0L
                        },
                        new
                        {
                            ActivityCode = "1011",
                            ActivityDescription = "PO Reopen",
                            ActivityTypeCode = "PA",
                            CreatedBy = "System",
                            CreatedDate = new DateTime(2021, 9, 14, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            LocationRequired = false,
                            RemarkRequired = false,
                            SortSequence = 0L
                        },
                        new
                        {
                            ActivityCode = "1013",
                            ActivityDescription = "Progress Check",
                            ActivityTypeCode = "PA",
                            CreatedBy = "System",
                            CreatedDate = new DateTime(2021, 9, 14, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            LocationRequired = false,
                            RemarkRequired = false,
                            SortSequence = 0L
                        },
                        new
                        {
                            ActivityCode = "1050",
                            ActivityDescription = "Booking Planning",
                            ActivityTypeCode = "FM",
                            CreatedBy = "System",
                            CreatedDate = new DateTime(2021, 9, 14, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            LocationRequired = false,
                            RemarkRequired = false,
                            SortSequence = 0L
                        },
                        new
                        {
                            ActivityCode = "1051",
                            ActivityDescription = "Booked",
                            ActivityTypeCode = "FA",
                            CreatedBy = "System",
                            CreatedDate = new DateTime(2021, 9, 14, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            LocationRequired = false,
                            RemarkRequired = false,
                            SortSequence = 0L
                        },
                        new
                        {
                            ActivityCode = "1052",
                            ActivityDescription = "Booking Itinerary Ready",
                            ActivityTypeCode = "FA",
                            CreatedBy = "System",
                            CreatedDate = new DateTime(2021, 9, 14, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            LocationRequired = false,
                            RemarkRequired = false,
                            SortSequence = 0L
                        },
                        new
                        {
                            ActivityCode = "1053",
                            ActivityDescription = "Booking Accepted",
                            ActivityTypeCode = "FA",
                            CreatedBy = "System",
                            CreatedDate = new DateTime(2021, 9, 14, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            LocationRequired = false,
                            RemarkRequired = false,
                            SortSequence = 0L
                        },
                        new
                        {
                            ActivityCode = "1054",
                            ActivityDescription = "Booking Denied",
                            ActivityTypeCode = "FA",
                            CreatedBy = "System",
                            CreatedDate = new DateTime(2021, 9, 14, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            LocationRequired = false,
                            RemarkRequired = true,
                            SortSequence = 0L
                        },
                        new
                        {
                            ActivityCode = "1055",
                            ActivityDescription = "Booking Approval Request",
                            ActivityTypeCode = "FE",
                            CreatedBy = "System",
                            CreatedDate = new DateTime(2021, 9, 14, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            LocationRequired = false,
                            RemarkRequired = false,
                            SortSequence = 0L
                        },
                        new
                        {
                            ActivityCode = "1056",
                            ActivityDescription = "Booking Amended",
                            ActivityTypeCode = "FA",
                            CreatedBy = "System",
                            CreatedDate = new DateTime(2021, 9, 14, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            LocationRequired = false,
                            RemarkRequired = false,
                            SortSequence = 0L
                        },
                        new
                        {
                            ActivityCode = "1057",
                            ActivityDescription = "Booking Cancelled",
                            ActivityTypeCode = "FE",
                            CreatedBy = "System",
                            CreatedDate = new DateTime(2021, 9, 14, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            LocationRequired = false,
                            RemarkRequired = true,
                            SortSequence = 0L
                        },
                        new
                        {
                            ActivityCode = "1058",
                            ActivityDescription = "Booking Approved",
                            ActivityTypeCode = "FA",
                            CreatedBy = "System",
                            CreatedDate = new DateTime(2021, 9, 14, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            LocationRequired = false,
                            RemarkRequired = false,
                            SortSequence = 0L
                        },
                        new
                        {
                            ActivityCode = "1059",
                            ActivityDescription = "Booking Rejected",
                            ActivityTypeCode = "FA",
                            CreatedBy = "System",
                            CreatedDate = new DateTime(2021, 9, 14, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            LocationRequired = false,
                            RemarkRequired = false,
                            SortSequence = 0L
                        },
                        new
                        {
                            ActivityCode = "1060",
                            ActivityDescription = "Booking Approval Overdue",
                            ActivityTypeCode = "FA",
                            CreatedBy = "System",
                            CreatedDate = new DateTime(2021, 9, 14, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            LocationRequired = false,
                            RemarkRequired = false,
                            SortSequence = 0L
                        },
                        new
                        {
                            ActivityCode = "1061",
                            ActivityDescription = "PO Booking confirmed",
                            ActivityTypeCode = "FM",
                            CreatedBy = "System",
                            CreatedDate = new DateTime(2021, 9, 14, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            LocationRequired = false,
                            RemarkRequired = false,
                            SortSequence = 0L
                        },
                        new
                        {
                            ActivityCode = "1062",
                            ActivityDescription = "Plan to ship",
                            ActivityTypeCode = "FA",
                            CreatedBy = "System",
                            CreatedDate = new DateTime(2021, 9, 14, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            LocationRequired = false,
                            RemarkRequired = false,
                            SortSequence = 0L
                        },
                        new
                        {
                            ActivityCode = "1063",
                            ActivityDescription = "Cargo Received",
                            ActivityTypeCode = "FM",
                            CreatedBy = "System",
                            CreatedDate = new DateTime(2021, 9, 14, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            LocationRequired = false,
                            RemarkRequired = false,
                            SortSequence = 0L
                        },
                        new
                        {
                            ActivityCode = "1069",
                            ActivityDescription = "Shipment Amendment",
                            ActivityTypeCode = "FE",
                            CreatedBy = "System",
                            CreatedDate = new DateTime(2021, 9, 14, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            LocationRequired = false,
                            RemarkRequired = false,
                            SortSequence = 0L
                        },
                        new
                        {
                            ActivityCode = "1070",
                            ActivityDescription = "Shipment Cancellation",
                            ActivityTypeCode = "FE",
                            CreatedBy = "System",
                            CreatedDate = new DateTime(2021, 9, 14, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            LocationRequired = false,
                            RemarkRequired = true,
                            SortSequence = 0L
                        },
                        new
                        {
                            ActivityCode = "1071",
                            ActivityDescription = "Booking Closed",
                            ActivityTypeCode = "FM",
                            CreatedBy = "System",
                            CreatedDate = new DateTime(2021, 9, 14, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            LocationRequired = false,
                            RemarkRequired = false,
                            SortSequence = 0L
                        },
                        new
                        {
                            ActivityCode = "1072",
                            ActivityDescription = "Reopen Booking",
                            ActivityTypeCode = "FE",
                            CreatedBy = "System",
                            CreatedDate = new DateTime(2021, 9, 14, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            LocationRequired = false,
                            RemarkRequired = true,
                            SortSequence = 0L
                        },
                        new
                        {
                            ActivityCode = "1073",
                            ActivityDescription = "Booking Completed",
                            ActivityTypeCode = "FM",
                            CreatedBy = "System",
                            CreatedDate = new DateTime(2021, 9, 14, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            LocationRequired = false,
                            RemarkRequired = false,
                            SortSequence = 0L
                        },
                        new
                        {
                            ActivityCode = "1074",
                            ActivityDescription = "SO Released Date",
                            ActivityTypeCode = "SA",
                            CreatedBy = "System",
                            CreatedDate = new DateTime(2021, 9, 14, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            LocationRequired = false,
                            RemarkRequired = false,
                            SortSequence = 0L
                        },
                        new
                        {
                            ActivityCode = "2000",
                            ActivityDescription = "Booking received",
                            ActivityTypeCode = "SA",
                            CreatedBy = "System",
                            CreatedDate = new DateTime(2021, 9, 14, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            LocationRequired = false,
                            RemarkRequired = false,
                            SortSequence = 0L
                        },
                        new
                        {
                            ActivityCode = "2001",
                            ActivityDescription = "Booking on hold",
                            ActivityTypeCode = "SE",
                            CreatedBy = "System",
                            CreatedDate = new DateTime(2021, 9, 14, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            LocationRequired = false,
                            RemarkRequired = true,
                            SortSequence = 0L
                        },
                        new
                        {
                            ActivityCode = "2005",
                            ActivityDescription = "Booking confirmed",
                            ActivityTypeCode = "SM",
                            CreatedBy = "System",
                            CreatedDate = new DateTime(2021, 9, 14, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            LocationRequired = false,
                            RemarkRequired = false,
                            SortSequence = 0L
                        },
                        new
                        {
                            ActivityCode = "2006",
                            ActivityDescription = "Container(s) released to shipper",
                            ActivityTypeCode = "SA",
                            CreatedBy = "System",
                            CreatedDate = new DateTime(2021, 9, 14, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            LocationRequired = false,
                            RemarkRequired = false,
                            SortSequence = 0L
                        },
                        new
                        {
                            ActivityCode = "2009",
                            ActivityDescription = "Partial handover in origin CFS",
                            ActivityTypeCode = "SA",
                            CreatedBy = "System",
                            CreatedDate = new DateTime(2021, 9, 14, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            LocationRequired = false,
                            RemarkRequired = false,
                            SortSequence = 0L
                        },
                        new
                        {
                            ActivityCode = "2011",
                            ActivityDescription = "Non-conformance cargo found",
                            ActivityTypeCode = "SE",
                            CreatedBy = "System",
                            CreatedDate = new DateTime(2021, 9, 14, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            LocationRequired = false,
                            RemarkRequired = true,
                            SortSequence = 0L
                        },
                        new
                        {
                            ActivityCode = "2012",
                            ActivityDescription = "Pulled for inspection",
                            ActivityTypeCode = "SA",
                            CreatedBy = "System",
                            CreatedDate = new DateTime(2021, 9, 14, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            LocationRequired = false,
                            RemarkRequired = true,
                            SortSequence = 0L
                        },
                        new
                        {
                            ActivityCode = "2014",
                            ActivityDescription = "Cargo handover at origin",
                            ActivityTypeCode = "SM",
                            CreatedBy = "System",
                            CreatedDate = new DateTime(2021, 9, 14, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            LocationRequired = false,
                            RemarkRequired = false,
                            SortSequence = 0L
                        },
                        new
                        {
                            ActivityCode = "2015",
                            ActivityDescription = "Shipment booked with carrier",
                            ActivityTypeCode = "SA",
                            CreatedBy = "System",
                            CreatedDate = new DateTime(2021, 9, 14, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            LocationRequired = false,
                            RemarkRequired = false,
                            SortSequence = 0L
                        },
                        new
                        {
                            ActivityCode = "2016",
                            ActivityDescription = "Shipment rejected by carrier",
                            ActivityTypeCode = "SA",
                            CreatedBy = "System",
                            CreatedDate = new DateTime(2021, 9, 14, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            LocationRequired = false,
                            RemarkRequired = true,
                            SortSequence = 0L
                        },
                        new
                        {
                            ActivityCode = "2017",
                            ActivityDescription = "Shipment re-book with alternative carrier/schedule",
                            ActivityTypeCode = "SA",
                            CreatedBy = "System",
                            CreatedDate = new DateTime(2021, 9, 14, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            LocationRequired = false,
                            RemarkRequired = false,
                            SortSequence = 0L
                        },
                        new
                        {
                            ActivityCode = "2021",
                            ActivityDescription = "Shipment pending for shipper document",
                            ActivityTypeCode = "SE",
                            CreatedBy = "System",
                            CreatedDate = new DateTime(2021, 9, 14, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            LocationRequired = false,
                            RemarkRequired = false,
                            SortSequence = 0L
                        },
                        new
                        {
                            ActivityCode = "2026",
                            ActivityDescription = "Shipment export customs hold",
                            ActivityTypeCode = "SE",
                            CreatedBy = "System",
                            CreatedDate = new DateTime(2021, 9, 14, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            LocationRequired = true,
                            RemarkRequired = true,
                            SortSequence = 0L
                        },
                        new
                        {
                            ActivityCode = "2027",
                            ActivityDescription = "Shipment export cleared",
                            ActivityTypeCode = "SA",
                            CreatedBy = "System",
                            CreatedDate = new DateTime(2021, 9, 14, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            LocationRequired = true,
                            RemarkRequired = false,
                            SortSequence = 0L
                        },
                        new
                        {
                            ActivityCode = "2028",
                            ActivityDescription = "Shipment late departure alert",
                            ActivityTypeCode = "SE",
                            CreatedBy = "System",
                            CreatedDate = new DateTime(2021, 9, 14, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            LocationRequired = true,
                            RemarkRequired = true,
                            SortSequence = 0L
                        },
                        new
                        {
                            ActivityCode = "2034",
                            ActivityDescription = "Bill of Lading released to Shipper",
                            ActivityTypeCode = "SA",
                            CreatedBy = "System",
                            CreatedDate = new DateTime(2021, 9, 14, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            LocationRequired = false,
                            RemarkRequired = false,
                            SortSequence = 0L
                        },
                        new
                        {
                            ActivityCode = "2040",
                            ActivityDescription = "Shipment import customs hold",
                            ActivityTypeCode = "SA",
                            CreatedBy = "System",
                            CreatedDate = new DateTime(2021, 9, 14, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            LocationRequired = true,
                            RemarkRequired = false,
                            SortSequence = 0L
                        },
                        new
                        {
                            ActivityCode = "2041",
                            ActivityDescription = "Shipment import customs cleared",
                            ActivityTypeCode = "SA",
                            CreatedBy = "System",
                            CreatedDate = new DateTime(2021, 9, 14, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            LocationRequired = true,
                            RemarkRequired = false,
                            SortSequence = 0L
                        },
                        new
                        {
                            ActivityCode = "2043",
                            ActivityDescription = "BOL surrendered received at destination",
                            ActivityTypeCode = "SA",
                            CreatedBy = "System",
                            CreatedDate = new DateTime(2021, 9, 14, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            LocationRequired = true,
                            RemarkRequired = false,
                            SortSequence = 0L
                        },
                        new
                        {
                            ActivityCode = "2053",
                            ActivityDescription = "Appointment made with consignee",
                            ActivityTypeCode = "SA",
                            CreatedBy = "System",
                            CreatedDate = new DateTime(2021, 9, 14, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            LocationRequired = false,
                            RemarkRequired = false,
                            SortSequence = 0L
                        },
                        new
                        {
                            ActivityCode = "2054",
                            ActivityDescription = "Shipment handover to consignee",
                            ActivityTypeCode = "SM",
                            CreatedBy = "System",
                            CreatedDate = new DateTime(2021, 9, 14, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            LocationRequired = false,
                            RemarkRequired = false,
                            SortSequence = 0L
                        },
                        new
                        {
                            ActivityCode = "2055",
                            ActivityDescription = "Payment received",
                            ActivityTypeCode = "SA",
                            CreatedBy = "System",
                            CreatedDate = new DateTime(2021, 9, 14, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            LocationRequired = false,
                            RemarkRequired = false,
                            SortSequence = 641L
                        },
                        new
                        {
                            ActivityCode = "3000",
                            ActivityDescription = "Container - Empty Pickup",
                            ActivityTypeCode = "CA",
                            CreatedBy = "System",
                            CreatedDate = new DateTime(2021, 9, 14, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            LocationRequired = false,
                            RemarkRequired = false,
                            SortSequence = 0L
                        },
                        new
                        {
                            ActivityCode = "3001",
                            ActivityDescription = "Container - Gate In",
                            ActivityTypeCode = "CM",
                            CreatedBy = "System",
                            CreatedDate = new DateTime(2021, 9, 14, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            LocationRequired = true,
                            RemarkRequired = false,
                            SortSequence = 0L
                        },
                        new
                        {
                            ActivityCode = "3002",
                            ActivityDescription = "Container - Vessel Load",
                            ActivityTypeCode = "CM",
                            CreatedBy = "System",
                            CreatedDate = new DateTime(2021, 9, 14, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            LocationRequired = true,
                            RemarkRequired = false,
                            SortSequence = 0L
                        },
                        new
                        {
                            ActivityCode = "3005",
                            ActivityDescription = "Container - Vessel Unload",
                            ActivityTypeCode = "CM",
                            CreatedBy = "System",
                            CreatedDate = new DateTime(2021, 9, 14, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            LocationRequired = true,
                            RemarkRequired = false,
                            SortSequence = 0L
                        },
                        new
                        {
                            ActivityCode = "3006",
                            ActivityDescription = "Container - Gate Out",
                            ActivityTypeCode = "CM",
                            CreatedBy = "System",
                            CreatedDate = new DateTime(2021, 9, 14, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            LocationRequired = true,
                            RemarkRequired = false,
                            SortSequence = 0L
                        },
                        new
                        {
                            ActivityCode = "3007",
                            ActivityDescription = "Container - Empty Return",
                            ActivityTypeCode = "CA",
                            CreatedBy = "System",
                            CreatedDate = new DateTime(2021, 9, 14, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            LocationRequired = false,
                            RemarkRequired = false,
                            SortSequence = 0L
                        },
                        new
                        {
                            ActivityCode = "3016",
                            ActivityDescription = "Customs Hold (PA)",
                            ActivityTypeCode = "CA",
                            CreatedBy = "System",
                            CreatedDate = new DateTime(2021, 9, 14, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            LocationRequired = false,
                            RemarkRequired = false,
                            SortSequence = 0L
                        },
                        new
                        {
                            ActivityCode = "3017",
                            ActivityDescription = "Customs Released (CT)",
                            ActivityTypeCode = "CA",
                            CreatedBy = "System",
                            CreatedDate = new DateTime(2021, 9, 14, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            LocationRequired = false,
                            RemarkRequired = false,
                            SortSequence = 0L
                        },
                        new
                        {
                            ActivityCode = "3018",
                            ActivityDescription = "Carrier Hold (X9)",
                            ActivityTypeCode = "CA",
                            CreatedBy = "System",
                            CreatedDate = new DateTime(2021, 9, 14, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            LocationRequired = false,
                            RemarkRequired = false,
                            SortSequence = 0L
                        },
                        new
                        {
                            ActivityCode = "3019",
                            ActivityDescription = "Carrier Release (CR)",
                            ActivityTypeCode = "CA",
                            CreatedBy = "System",
                            CreatedDate = new DateTime(2021, 9, 14, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            LocationRequired = false,
                            RemarkRequired = false,
                            SortSequence = 0L
                        },
                        new
                        {
                            ActivityCode = "3031",
                            ActivityDescription = "Free Demurrage Ends",
                            ActivityTypeCode = "CA",
                            CreatedBy = "System",
                            CreatedDate = new DateTime(2021, 9, 14, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            LocationRequired = false,
                            RemarkRequired = false,
                            SortSequence = 0L
                        },
                        new
                        {
                            ActivityCode = "3032",
                            ActivityDescription = "Free Detention Ends",
                            ActivityTypeCode = "CA",
                            CreatedBy = "System",
                            CreatedDate = new DateTime(2021, 9, 14, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            LocationRequired = false,
                            RemarkRequired = false,
                            SortSequence = 0L
                        },
                        new
                        {
                            ActivityCode = "3033",
                            ActivityDescription = "Haulage to Offdock CY",
                            ActivityTypeCode = "CA",
                            CreatedBy = "System",
                            CreatedDate = new DateTime(2021, 9, 14, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            LocationRequired = false,
                            RemarkRequired = false,
                            SortSequence = 0L
                        },
                        new
                        {
                            ActivityCode = "3034",
                            ActivityDescription = "Receipt of Containers at Offdock CY",
                            ActivityTypeCode = "CA",
                            CreatedBy = "System",
                            CreatedDate = new DateTime(2021, 9, 14, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            LocationRequired = false,
                            RemarkRequired = false,
                            SortSequence = 0L
                        },
                        new
                        {
                            ActivityCode = "3050",
                            ActivityDescription = "CFS Closing Date",
                            ActivityTypeCode = "CA",
                            CreatedBy = "System",
                            CreatedDate = new DateTime(2021, 9, 14, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            LocationRequired = false,
                            RemarkRequired = false,
                            SortSequence = 0L
                        },
                        new
                        {
                            ActivityCode = "3051",
                            ActivityDescription = "CY Closing Date",
                            ActivityTypeCode = "CA",
                            CreatedBy = "System",
                            CreatedDate = new DateTime(2021, 9, 14, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            LocationRequired = false,
                            RemarkRequired = false,
                            SortSequence = 0L
                        },
                        new
                        {
                            ActivityCode = "3052",
                            ActivityDescription = "Container roll over",
                            ActivityTypeCode = "CA",
                            CreatedBy = "System",
                            CreatedDate = new DateTime(2021, 9, 14, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            LocationRequired = false,
                            RemarkRequired = false,
                            SortSequence = 541L
                        },
                        new
                        {
                            ActivityCode = "3098",
                            ActivityDescription = "Demurrage Alert",
                            ActivityTypeCode = "CE",
                            CreatedBy = "System",
                            CreatedDate = new DateTime(2021, 9, 14, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            LocationRequired = false,
                            RemarkRequired = false,
                            SortSequence = 0L
                        },
                        new
                        {
                            ActivityCode = "3099",
                            ActivityDescription = "Detention Alert",
                            ActivityTypeCode = "CE",
                            CreatedBy = "System",
                            CreatedDate = new DateTime(2021, 9, 14, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            LocationRequired = false,
                            RemarkRequired = false,
                            SortSequence = 0L
                        },
                        new
                        {
                            ActivityCode = "4000",
                            ActivityDescription = "Shipment Completed",
                            ActivityTypeCode = "ES",
                            CreatedBy = "System",
                            CreatedDate = new DateTime(2021, 9, 14, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            LocationRequired = false,
                            RemarkRequired = false,
                            SortSequence = 0L
                        },
                        new
                        {
                            ActivityCode = "4001",
                            ActivityDescription = "Shipment Abandoned",
                            ActivityTypeCode = "EE",
                            CreatedBy = "System",
                            CreatedDate = new DateTime(2021, 9, 14, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            LocationRequired = false,
                            RemarkRequired = true,
                            SortSequence = 0L
                        },
                        new
                        {
                            ActivityCode = "5000",
                            ActivityDescription = "PICK- Pick up arranged for loose cargo",
                            ActivityTypeCode = "CSM",
                            CreatedBy = "System",
                            CreatedDate = new DateTime(2021, 9, 14, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            LocationRequired = false,
                            RemarkRequired = false,
                            SortSequence = 0L
                        },
                        new
                        {
                            ActivityCode = "5001",
                            ActivityDescription = "ON HAND- Goods received in hub",
                            ActivityTypeCode = "CSM",
                            CreatedBy = "System",
                            CreatedDate = new DateTime(2021, 9, 14, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            LocationRequired = false,
                            RemarkRequired = false,
                            SortSequence = 0L
                        },
                        new
                        {
                            ActivityCode = "5002",
                            ActivityDescription = "ATS- Authorized To Ship",
                            ActivityTypeCode = "CSM",
                            CreatedBy = "System",
                            CreatedDate = new DateTime(2021, 9, 14, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            LocationRequired = false,
                            RemarkRequired = false,
                            SortSequence = 0L
                        },
                        new
                        {
                            ActivityCode = "5003",
                            ActivityDescription = "VC- Booked For Vendor",
                            ActivityTypeCode = "CSM",
                            CreatedBy = "System",
                            CreatedDate = new DateTime(2021, 9, 14, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            LocationRequired = false,
                            RemarkRequired = false,
                            SortSequence = 0L
                        },
                        new
                        {
                            ActivityCode = "5004",
                            ActivityDescription = "OG- Delivered Origin",
                            ActivityTypeCode = "CSM",
                            CreatedBy = "System",
                            CreatedDate = new DateTime(2021, 9, 14, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            LocationRequired = false,
                            RemarkRequired = false,
                            SortSequence = 0L
                        },
                        new
                        {
                            ActivityCode = "5005",
                            ActivityDescription = "COB- Confirm On Board",
                            ActivityTypeCode = "CSM",
                            CreatedBy = "System",
                            CreatedDate = new DateTime(2021, 9, 14, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            LocationRequired = false,
                            RemarkRequired = false,
                            SortSequence = 0L
                        },
                        new
                        {
                            ActivityCode = "5006",
                            ActivityDescription = "SHI- Shipped",
                            ActivityTypeCode = "CSM",
                            CreatedBy = "System",
                            CreatedDate = new DateTime(2021, 9, 14, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            LocationRequired = false,
                            RemarkRequired = false,
                            SortSequence = 0L
                        },
                        new
                        {
                            ActivityCode = "5007",
                            ActivityDescription = "TRN- In Transit",
                            ActivityTypeCode = "CSM",
                            CreatedBy = "System",
                            CreatedDate = new DateTime(2021, 9, 14, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            LocationRequired = false,
                            RemarkRequired = false,
                            SortSequence = 0L
                        },
                        new
                        {
                            ActivityCode = "5008",
                            ActivityDescription = "PT- Transhipment",
                            ActivityTypeCode = "CSM",
                            CreatedBy = "System",
                            CreatedDate = new DateTime(2021, 9, 14, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            LocationRequired = false,
                            RemarkRequired = false,
                            SortSequence = 0L
                        },
                        new
                        {
                            ActivityCode = "5009",
                            ActivityDescription = "AR- Arrived At Destination",
                            ActivityTypeCode = "CSM",
                            CreatedBy = "System",
                            CreatedDate = new DateTime(2021, 9, 14, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            LocationRequired = false,
                            RemarkRequired = false,
                            SortSequence = 0L
                        },
                        new
                        {
                            ActivityCode = "5010",
                            ActivityDescription = "DL- Delivered To Shipyard",
                            ActivityTypeCode = "CSM",
                            CreatedBy = "System",
                            CreatedDate = new DateTime(2021, 9, 14, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            LocationRequired = false,
                            RemarkRequired = false,
                            SortSequence = 0L
                        },
                        new
                        {
                            ActivityCode = "5011",
                            ActivityDescription = "SSD- Container To Ship",
                            ActivityTypeCode = "CSM",
                            CreatedBy = "System",
                            CreatedDate = new DateTime(2021, 9, 14, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            LocationRequired = false,
                            RemarkRequired = false,
                            SortSequence = 0L
                        },
                        new
                        {
                            ActivityCode = "5012",
                            ActivityDescription = "RE- Container Empty",
                            ActivityTypeCode = "CSM",
                            CreatedBy = "System",
                            CreatedDate = new DateTime(2021, 9, 14, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            LocationRequired = false,
                            RemarkRequired = false,
                            SortSequence = 0L
                        },
                        new
                        {
                            ActivityCode = "5013",
                            ActivityDescription = "IG- Empty Container Returned",
                            ActivityTypeCode = "CSM",
                            CreatedBy = "System",
                            CreatedDate = new DateTime(2021, 9, 14, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            LocationRequired = false,
                            RemarkRequired = false,
                            SortSequence = 0L
                        },
                        new
                        {
                            ActivityCode = "7001",
                            ActivityDescription = "Vessel Departure",
                            ActivityTypeCode = "VA",
                            CreatedBy = "System",
                            CreatedDate = new DateTime(2021, 9, 14, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            LocationRequired = true,
                            RemarkRequired = false,
                            SortSequence = 0L
                        },
                        new
                        {
                            ActivityCode = "7002",
                            ActivityDescription = "Vessel Arrival",
                            ActivityTypeCode = "VA",
                            CreatedBy = "System",
                            CreatedDate = new DateTime(2021, 9, 14, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            LocationRequired = true,
                            RemarkRequired = false,
                            SortSequence = 0L
                        },
                        new
                        {
                            ActivityCode = "7003",
                            ActivityDescription = "Flight Departure",
                            ActivityTypeCode = "VA",
                            CreatedBy = "System",
                            CreatedDate = new DateTime(2021, 9, 14, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            LocationRequired = true,
                            RemarkRequired = false,
                            SortSequence = 0L
                        },
                        new
                        {
                            ActivityCode = "7004",
                            ActivityDescription = "Flight Arrival",
                            ActivityTypeCode = "VA",
                            CreatedBy = "System",
                            CreatedDate = new DateTime(2021, 9, 14, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            LocationRequired = true,
                            RemarkRequired = false,
                            SortSequence = 0L
                        });
                });

            modelBuilder.Entity("Groove.CSFE.Core.Entities.EventTypeModel", b =>
                {
                    b.Property<string>("Code")
                        .HasMaxLength(10)
                        .HasColumnType("NVARCHAR(10)");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(128)
                        .HasColumnType("varchar(128)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasMaxLength(512)
                        .HasColumnType("NVARCHAR(512)");

                    b.Property<int>("EventLevel")
                        .HasColumnType("int");

                    b.Property<string>("LevelDescription")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("NVARCHAR(100)");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(128)
                        .HasColumnType("varchar(128)");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Code");

                    b.ToTable("EventTypes");

                    b.HasData(
                        new
                        {
                            Code = "PM",
                            CreatedBy = "System",
                            CreatedDate = new DateTime(2019, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Purchase Order Milestone Event",
                            EventLevel = 1,
                            LevelDescription = "PO"
                        },
                        new
                        {
                            Code = "PE",
                            CreatedBy = "System",
                            CreatedDate = new DateTime(2019, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Purchase Order Exception Event",
                            EventLevel = 1,
                            LevelDescription = "PO"
                        },
                        new
                        {
                            Code = "PA",
                            CreatedBy = "System",
                            CreatedDate = new DateTime(2019, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Purchase Order Activity Event",
                            EventLevel = 1,
                            LevelDescription = "PO"
                        },
                        new
                        {
                            Code = "FM",
                            CreatedBy = "System",
                            CreatedDate = new DateTime(2019, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Booking Milestone Event",
                            EventLevel = 2,
                            LevelDescription = "Booking"
                        },
                        new
                        {
                            Code = "FA",
                            CreatedBy = "System",
                            CreatedDate = new DateTime(2019, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Booking Activity Event",
                            EventLevel = 2,
                            LevelDescription = "Booking"
                        },
                        new
                        {
                            Code = "FE",
                            CreatedBy = "System",
                            CreatedDate = new DateTime(2019, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Booking Exception Event",
                            EventLevel = 2,
                            LevelDescription = "Booking"
                        },
                        new
                        {
                            Code = "OM",
                            CreatedBy = "System",
                            CreatedDate = new DateTime(2019, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Shipping Order Milestone Event",
                            EventLevel = 3,
                            LevelDescription = "SO"
                        },
                        new
                        {
                            Code = "OE",
                            CreatedBy = "System",
                            CreatedDate = new DateTime(2019, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Shipping Order Exception Event",
                            EventLevel = 3,
                            LevelDescription = "SO"
                        },
                        new
                        {
                            Code = "OA",
                            CreatedBy = "System",
                            CreatedDate = new DateTime(2019, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Shipping Order Activity Event",
                            EventLevel = 3,
                            LevelDescription = "SO"
                        },
                        new
                        {
                            Code = "SE",
                            CreatedBy = "System",
                            CreatedDate = new DateTime(2019, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Shipment Exception Event",
                            EventLevel = 4,
                            LevelDescription = "Shipment"
                        },
                        new
                        {
                            Code = "SM",
                            CreatedBy = "System",
                            CreatedDate = new DateTime(2019, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Shipment Milestone Event",
                            EventLevel = 4,
                            LevelDescription = "Shipment"
                        },
                        new
                        {
                            Code = "SA",
                            CreatedBy = "System",
                            CreatedDate = new DateTime(2019, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Shipment Activity Event",
                            EventLevel = 4,
                            LevelDescription = "Shipment"
                        },
                        new
                        {
                            Code = "CA",
                            CreatedBy = "System",
                            CreatedDate = new DateTime(2019, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Container Activity Event",
                            EventLevel = 5,
                            LevelDescription = "Container"
                        },
                        new
                        {
                            Code = "CM",
                            CreatedBy = "System",
                            CreatedDate = new DateTime(2019, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Container Milestone Event",
                            EventLevel = 5,
                            LevelDescription = "Container"
                        },
                        new
                        {
                            Code = "CE",
                            CreatedBy = "System",
                            CreatedDate = new DateTime(2019, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Container Exception Event",
                            EventLevel = 5,
                            LevelDescription = "Container"
                        },
                        new
                        {
                            Code = "MM",
                            CreatedBy = "System",
                            CreatedDate = new DateTime(2019, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Master Milestone Event",
                            EventLevel = 6,
                            LevelDescription = "Master"
                        },
                        new
                        {
                            Code = "ME",
                            CreatedBy = "System",
                            CreatedDate = new DateTime(2019, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Master Exception Event",
                            EventLevel = 6,
                            LevelDescription = "Master"
                        },
                        new
                        {
                            Code = "MA",
                            CreatedBy = "System",
                            CreatedDate = new DateTime(2019, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Master Activity Event",
                            EventLevel = 6,
                            LevelDescription = "Master"
                        },
                        new
                        {
                            Code = "VM",
                            CreatedBy = "System",
                            CreatedDate = new DateTime(2019, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Vessel Milestone Event",
                            EventLevel = 7,
                            LevelDescription = "Vessel"
                        },
                        new
                        {
                            Code = "VE",
                            CreatedBy = "System",
                            CreatedDate = new DateTime(2019, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Vessel Exception Event",
                            EventLevel = 7,
                            LevelDescription = "Vessel"
                        },
                        new
                        {
                            Code = "VA",
                            CreatedBy = "System",
                            CreatedDate = new DateTime(2019, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Vessel Activity Event",
                            EventLevel = 7,
                            LevelDescription = "Vessel"
                        },
                        new
                        {
                            Code = "EP",
                            CreatedBy = "System",
                            CreatedDate = new DateTime(2019, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "End of Purchase Order",
                            EventLevel = 1,
                            LevelDescription = "End"
                        },
                        new
                        {
                            Code = "ES",
                            CreatedBy = "System",
                            CreatedDate = new DateTime(2019, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "End of Shipment",
                            EventLevel = 4,
                            LevelDescription = "End"
                        },
                        new
                        {
                            Code = "EE",
                            CreatedBy = "System",
                            CreatedDate = new DateTime(2019, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "End with Exception",
                            EventLevel = 4,
                            LevelDescription = "End"
                        },
                        new
                        {
                            Code = "CSM",
                            CreatedBy = "System",
                            CreatedDate = new DateTime(2019, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Cruise Shipment Milestone",
                            EventLevel = 4,
                            LevelDescription = "Cruise"
                        });
                });

            modelBuilder.Entity("Groove.CSFE.Core.Entities.LocationModel", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"), 1L, 1);

                    b.Property<long>("CountryId")
                        .HasColumnType("bigint");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(128)
                        .HasColumnType("varchar(128)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("EdiSonPortCode")
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("LocationDescription")
                        .IsRequired()
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(128)");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(128)
                        .HasColumnType("varchar(128)");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("CountryId");

                    b.ToTable("Locations");
                });

            modelBuilder.Entity("Groove.CSFE.Core.Entities.LocationQueryModel", b =>
                {
                    b.Property<long>("CountryId")
                        .HasColumnType("bigint");

                    b.Property<string>("CountryName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("EdiSonPortCode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("Id")
                        .HasColumnType("bigint");

                    b.Property<string>("LocationDescription")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.ToView(null);
                });

            modelBuilder.Entity("Groove.CSFE.Core.Entities.OrganizationInRoleModel", b =>
                {
                    b.Property<long>("OrganizationId")
                        .HasColumnType("bigint");

                    b.Property<long>("OrganizationRoleId")
                        .HasColumnType("bigint");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(128)
                        .HasColumnType("varchar(128)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(128)
                        .HasColumnType("varchar(128)");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("OrganizationId", "OrganizationRoleId");

                    b.HasIndex("OrganizationRoleId");

                    b.ToTable("OrganizationInRoles");
                });

            modelBuilder.Entity("Groove.CSFE.Core.Entities.OrganizationModel", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"), 1L, 1);

                    b.Property<string>("Address")
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("AddressLine2")
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("AddressLine3")
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("AddressLine4")
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("AdminUser")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("AgentType")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(1);

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("varchar(35)");

                    b.Property<string>("ContactEmail")
                        .HasColumnType("varchar(128)");

                    b.Property<string>("ContactName")
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("ContactNumber")
                        .HasColumnType("varchar(32)");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(128)
                        .HasColumnType("varchar(128)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("CustomerPrefix")
                        .HasColumnType("varchar(5)");

                    b.Property<string>("EdisonCompanyCodeId")
                        .HasColumnType("nvarchar(32)");

                    b.Property<string>("EdisonInstanceId")
                        .HasColumnType("nvarchar(32)");

                    b.Property<bool>("IsBuyer")
                        .HasColumnType("bit");

                    b.Property<long?>("LocationId")
                        .HasColumnType("bigint");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("OrganizationLogo")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("OrganizationType")
                        .HasColumnType("int");

                    b.Property<string>("ParentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("varchar(256)")
                        .HasDefaultValue("");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.Property<int>("SOFormGenerationFileType")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(10);

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<string>("TaxpayerId")
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(128)
                        .HasColumnType("varchar(128)");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("WeChatOrWhatsApp")
                        .HasColumnType("varchar(32)");

                    b.Property<string>("WebsiteDomain")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("Code")
                        .IsUnique();

                    b.HasIndex("LocationId");

                    b.HasIndex("ParentId");

                    b.HasIndex("CreatedDate", "Name", "Id");

                    b.ToTable("Organizations");
                });

            modelBuilder.Entity("Groove.CSFE.Core.Entities.OrganizationRoleModel", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"), 1L, 1);

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(128)
                        .HasColumnType("varchar(128)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(256)");

                    b.Property<int>("OrganizationTypes")
                        .HasColumnType("int");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(128)
                        .HasColumnType("varchar(128)");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("OrganizationRoles");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            CreatedBy = "System",
                            CreatedDate = new DateTime(2019, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Shipper",
                            OrganizationTypes = 7
                        },
                        new
                        {
                            Id = 2L,
                            CreatedBy = "System",
                            CreatedDate = new DateTime(2019, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Consignee",
                            OrganizationTypes = 7
                        },
                        new
                        {
                            Id = 3L,
                            CreatedBy = "System",
                            CreatedDate = new DateTime(2019, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Notify Party",
                            OrganizationTypes = 7
                        },
                        new
                        {
                            Id = 4L,
                            CreatedBy = "System",
                            CreatedDate = new DateTime(2019, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Also Notify",
                            OrganizationTypes = 7
                        },
                        new
                        {
                            Id = 5L,
                            CreatedBy = "System",
                            CreatedDate = new DateTime(2019, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Import Broker",
                            OrganizationTypes = 7
                        },
                        new
                        {
                            Id = 6L,
                            CreatedBy = "System",
                            CreatedDate = new DateTime(2019, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Export Broker",
                            OrganizationTypes = 7
                        },
                        new
                        {
                            Id = 7L,
                            CreatedBy = "System",
                            CreatedDate = new DateTime(2019, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Origin Agent",
                            OrganizationTypes = 2
                        },
                        new
                        {
                            Id = 8L,
                            CreatedBy = "System",
                            CreatedDate = new DateTime(2019, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Destination Agent",
                            OrganizationTypes = 2
                        },
                        new
                        {
                            Id = 9L,
                            CreatedBy = "System",
                            CreatedDate = new DateTime(2019, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Principal",
                            OrganizationTypes = 4
                        },
                        new
                        {
                            Id = 10L,
                            CreatedBy = "System",
                            CreatedDate = new DateTime(2019, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Supplier",
                            OrganizationTypes = 4
                        },
                        new
                        {
                            Id = 11L,
                            CreatedBy = "System",
                            CreatedDate = new DateTime(2019, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Delegation",
                            OrganizationTypes = 4
                        },
                        new
                        {
                            Id = 12L,
                            CreatedBy = "System",
                            CreatedDate = new DateTime(2019, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Billing Party",
                            OrganizationTypes = 7
                        },
                        new
                        {
                            Id = 13L,
                            CreatedBy = "System",
                            CreatedDate = new DateTime(2019, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Pickup",
                            OrganizationTypes = 7
                        });
                });

            modelBuilder.Entity("Groove.CSFE.Core.Entities.PortModel", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"), 1L, 1);

                    b.Property<string>("AirportCode")
                        .HasColumnType("NVARCHAR(50)");

                    b.Property<string>("AlternativeName")
                        .HasColumnType("NVARCHAR(512)");

                    b.Property<string>("ChineseName")
                        .HasColumnType("NVARCHAR(512)");

                    b.Property<long>("CountryId")
                        .HasColumnType("bigint");

                    b.Property<string>("CountryName")
                        .HasColumnType("NVARCHAR(512)");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(128)
                        .HasColumnType("varchar(128)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsAirport")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("NVARCHAR(512)");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.Property<string>("SeaportCode")
                        .HasColumnType("NVARCHAR(50)");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(128)
                        .HasColumnType("varchar(128)");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("Ports");
                });

            modelBuilder.Entity("Groove.CSFE.Core.Entities.TerminalModel", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"), 1L, 1);

                    b.Property<string>("Address")
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(128)
                        .HasColumnType("varchar(128)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<long>("LocationId")
                        .HasColumnType("bigint");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.Property<string>("TerminalCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("TerminalName")
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(128)
                        .HasColumnType("varchar(128)");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("LocationId");

                    b.ToTable("Terminals");
                });

            modelBuilder.Entity("Groove.CSFE.Core.Entities.UserOfficeModel", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"), 1L, 1);

                    b.Property<string>("CorpMarketingContactEmail")
                        .HasColumnType("varchar(128)");

                    b.Property<string>("CorpMarketingContactName")
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(128)
                        .HasColumnType("varchar(128)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<long>("LocationId")
                        .HasColumnType("bigint");

                    b.Property<string>("OPManagementContactEmail")
                        .HasColumnType("varchar(128)");

                    b.Property<string>("OPManagementContactName")
                        .HasColumnType("nvarchar(256)");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(128)
                        .HasColumnType("varchar(128)");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("LocationId")
                        .IsUnique();

                    b.ToTable("UserOffices");
                });

            modelBuilder.Entity("Groove.CSFE.Core.Entities.VesselModel", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"), 1L, 1);

                    b.Property<string>("Code")
                        .HasColumnType("NVARCHAR(64)");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(128)
                        .HasColumnType("varchar(128)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsRealVessel")
                        .HasColumnType("BIT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("NVARCHAR(512)");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(128)
                        .HasColumnType("varchar(128)");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("Vessels");
                });

            modelBuilder.Entity("Groove.CSFE.Core.Entities.VesselQueryModel", b =>
                {
                    b.Property<string>("Code")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("Id")
                        .HasColumnType("bigint");

                    b.Property<bool>("IsRealVessel")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.ToView(null);
                });

            modelBuilder.Entity("Groove.CSFE.Core.Entities.WarehouseAssignmentModel", b =>
                {
                    b.Property<long>("OrganizationId")
                        .HasColumnType("bigint");

                    b.Property<long>("WarehouseLocationId")
                        .HasColumnType("bigint");

                    b.Property<string>("ContactEmail")
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ContactPerson")
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("ContactPhone")
                        .HasColumnType("nvarchar(32)");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(128)
                        .HasColumnType("varchar(128)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(128)
                        .HasColumnType("varchar(128)");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("OrganizationId", "WarehouseLocationId");

                    b.HasIndex("WarehouseLocationId");

                    b.ToTable("WarehouseAssignments");
                });

            modelBuilder.Entity("Groove.CSFE.Core.Entities.WarehouseLocationModel", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"), 1L, 1);

                    b.Property<string>("AddressLine1")
                        .IsRequired()
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("AddressLine2")
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("AddressLine3")
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("AddressLine4")
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ContactEmail")
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ContactPerson")
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("ContactPhone")
                        .HasColumnType("nvarchar(32)");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(128)
                        .HasColumnType("varchar(128)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<long>("LocationId")
                        .HasColumnType("bigint");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(128)");

                    b.Property<long>("OrganizationId")
                        .HasColumnType("bigint");

                    b.Property<string>("Remarks")
                        .HasColumnType("nvarchar(512)");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(128)
                        .HasColumnType("varchar(128)");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("WorkingHours")
                        .HasColumnType("nvarchar(512)");

                    b.HasKey("Id");

                    b.HasIndex("LocationId");

                    b.HasIndex("OrganizationId");

                    b.ToTable("WarehouseLocations");
                });

            modelBuilder.Entity("Groove.CSFE.Core.Entities.WarehouseLocationQueryModel", b =>
                {
                    b.Property<string>("Code")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ContactName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("Id")
                        .HasColumnType("bigint");

                    b.Property<string>("Location")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("OrganizationId")
                        .HasColumnType("bigint");

                    b.Property<string>("Provider")
                        .HasColumnType("nvarchar(max)");

                    b.ToView(null);
                });

            modelBuilder.Entity("Groove.CSFE.Core.Entities.WarehouseModel", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"), 1L, 1);

                    b.Property<string>("Address")
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(128)
                        .HasColumnType("varchar(128)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<long>("LocationId")
                        .HasColumnType("bigint");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(128)
                        .HasColumnType("varchar(128)");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("WarehouseCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("WarehouseName")
                        .HasColumnType("nvarchar(128)");

                    b.HasKey("Id");

                    b.HasIndex("LocationId");

                    b.ToTable("Warehouses");
                });

            modelBuilder.Entity("Groove.CSFE.Core.Entities.AlternativeLocationModel", b =>
                {
                    b.HasOne("Groove.CSFE.Core.Entities.LocationModel", "Location")
                        .WithMany("AlternativeLocations")
                        .HasForeignKey("LocationId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Location");
                });

            modelBuilder.Entity("Groove.CSFE.Core.Entities.CustomerRelationshipModel", b =>
                {
                    b.HasOne("Groove.CSFE.Core.Entities.OrganizationModel", "Customer")
                        .WithMany()
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Groove.CSFE.Core.Entities.OrganizationModel", "Supplier")
                        .WithMany("CustomerRelationship")
                        .HasForeignKey("SupplierId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Customer");

                    b.Navigation("Supplier");
                });

            modelBuilder.Entity("Groove.CSFE.Core.Entities.EmailNotificationModel", b =>
                {
                    b.HasOne("Groove.CSFE.Core.Entities.CountryModel", "Country")
                        .WithMany("EmailNotifications")
                        .HasForeignKey("CountryId");

                    b.HasOne("Groove.CSFE.Core.Entities.OrganizationModel", "Customer")
                        .WithMany()
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Groove.CSFE.Core.Entities.OrganizationModel", "Organization")
                        .WithMany("EmailNotifications")
                        .HasForeignKey("OrganizationId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Country");

                    b.Navigation("Customer");

                    b.Navigation("Organization");
                });

            modelBuilder.Entity("Groove.CSFE.Core.Entities.EventCodeModel", b =>
                {
                    b.HasOne("Groove.CSFE.Core.Entities.EventTypeModel", "ActivityType")
                        .WithMany("EventCodes")
                        .HasForeignKey("ActivityTypeCode");

                    b.Navigation("ActivityType");
                });

            modelBuilder.Entity("Groove.CSFE.Core.Entities.LocationModel", b =>
                {
                    b.HasOne("Groove.CSFE.Core.Entities.CountryModel", "Country")
                        .WithMany("Locations")
                        .HasForeignKey("CountryId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Country");
                });

            modelBuilder.Entity("Groove.CSFE.Core.Entities.OrganizationInRoleModel", b =>
                {
                    b.HasOne("Groove.CSFE.Core.Entities.OrganizationModel", "Organization")
                        .WithMany("OrganizationInRoles")
                        .HasForeignKey("OrganizationId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Groove.CSFE.Core.Entities.OrganizationRoleModel", "OrganizationRole")
                        .WithMany("OrganizationInRoles")
                        .HasForeignKey("OrganizationRoleId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Organization");

                    b.Navigation("OrganizationRole");
                });

            modelBuilder.Entity("Groove.CSFE.Core.Entities.OrganizationModel", b =>
                {
                    b.HasOne("Groove.CSFE.Core.Entities.LocationModel", "Location")
                        .WithMany("Organizations")
                        .HasForeignKey("LocationId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("Location");
                });

            modelBuilder.Entity("Groove.CSFE.Core.Entities.TerminalModel", b =>
                {
                    b.HasOne("Groove.CSFE.Core.Entities.LocationModel", "Location")
                        .WithMany("Terminals")
                        .HasForeignKey("LocationId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Location");
                });

            modelBuilder.Entity("Groove.CSFE.Core.Entities.UserOfficeModel", b =>
                {
                    b.HasOne("Groove.CSFE.Core.Entities.LocationModel", "Location")
                        .WithOne("UserOffices")
                        .HasForeignKey("Groove.CSFE.Core.Entities.UserOfficeModel", "LocationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Location");
                });

            modelBuilder.Entity("Groove.CSFE.Core.Entities.WarehouseAssignmentModel", b =>
                {
                    b.HasOne("Groove.CSFE.Core.Entities.OrganizationModel", "Organization")
                        .WithMany("WarehouseAssignments")
                        .HasForeignKey("OrganizationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Groove.CSFE.Core.Entities.WarehouseLocationModel", "WarehouseLocation")
                        .WithMany("WarehouseAssignments")
                        .HasForeignKey("WarehouseLocationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Organization");

                    b.Navigation("WarehouseLocation");
                });

            modelBuilder.Entity("Groove.CSFE.Core.Entities.WarehouseLocationModel", b =>
                {
                    b.HasOne("Groove.CSFE.Core.Entities.LocationModel", "Location")
                        .WithMany("WarehouseLocations")
                        .HasForeignKey("LocationId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Groove.CSFE.Core.Entities.OrganizationModel", "Organization")
                        .WithMany("Warehouses")
                        .HasForeignKey("OrganizationId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Location");

                    b.Navigation("Organization");
                });

            modelBuilder.Entity("Groove.CSFE.Core.Entities.WarehouseModel", b =>
                {
                    b.HasOne("Groove.CSFE.Core.Entities.LocationModel", "Location")
                        .WithMany("Warehouses")
                        .HasForeignKey("LocationId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Location");
                });

            modelBuilder.Entity("Groove.CSFE.Core.Entities.CountryModel", b =>
                {
                    b.Navigation("EmailNotifications");

                    b.Navigation("Locations");
                });

            modelBuilder.Entity("Groove.CSFE.Core.Entities.EventTypeModel", b =>
                {
                    b.Navigation("EventCodes");
                });

            modelBuilder.Entity("Groove.CSFE.Core.Entities.LocationModel", b =>
                {
                    b.Navigation("AlternativeLocations");

                    b.Navigation("Organizations");

                    b.Navigation("Terminals");

                    b.Navigation("UserOffices");

                    b.Navigation("WarehouseLocations");

                    b.Navigation("Warehouses");
                });

            modelBuilder.Entity("Groove.CSFE.Core.Entities.OrganizationModel", b =>
                {
                    b.Navigation("CustomerRelationship");

                    b.Navigation("EmailNotifications");

                    b.Navigation("OrganizationInRoles");

                    b.Navigation("WarehouseAssignments");

                    b.Navigation("Warehouses");
                });

            modelBuilder.Entity("Groove.CSFE.Core.Entities.OrganizationRoleModel", b =>
                {
                    b.Navigation("OrganizationInRoles");
                });

            modelBuilder.Entity("Groove.CSFE.Core.Entities.WarehouseLocationModel", b =>
                {
                    b.Navigation("WarehouseAssignments");
                });
#pragma warning restore 612, 618
        }
    }
}
